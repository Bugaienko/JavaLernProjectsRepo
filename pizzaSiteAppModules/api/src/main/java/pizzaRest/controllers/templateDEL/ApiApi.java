//package pizzaRest.controllers.templateDEL;
///**
// * NOTE: This class is auto generated by the swagger code generator program (3.0.42).
// * https://github.com/swagger-api/swagger-codegen
// * Do not edit the class manually.
// */
//
//
//import io.swagger.v3.oas.annotations.Operation;
//import io.swagger.v3.oas.annotations.Parameter;
//import io.swagger.v3.oas.annotations.enums.ParameterIn;
//import io.swagger.v3.oas.annotations.responses.ApiResponses;
//import io.swagger.v3.oas.annotations.responses.ApiResponse;
//import io.swagger.v3.oas.annotations.media.ArraySchema;
//import io.swagger.v3.oas.annotations.media.Content;
//import io.swagger.v3.oas.annotations.media.Schema;
//import io.swagger.v3.oas.annotations.security.SecurityRequirement;
//import org.springframework.http.ResponseEntity;
//import org.springframework.validation.annotation.Validated;
//import org.springframework.web.bind.annotation.*;
//import org.springframework.web.multipart.MultipartFile;
//
//import javax.validation.Valid;
//import javax.validation.constraints.*;
//import java.util.List;
//import java.util.Map;
//
//@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2023-04-16T14:31:40.830807727Z[GMT]")
//@Validated
//public interface ApiApi {
//
//    @Operation(summary = "Add ingredient", description = "Add ingredient", security = {
//            @SecurityRequirement(name = "bearerAuth")    }, tags={ "Ingredients" })
//    @ApiResponses(value = {
//            @ApiResponse(responseCode = "200", description = "Ok", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Ingredient.class))),
//
//            @ApiResponse(responseCode = "401", description = "Access denied"),
//
//            @ApiResponse(responseCode = "404", description = "Request failed - bad data") })
//    @PostMapping(value = "/api/ingredients/add",
//            produces = { "application/json" },
//            consumes = { "application/json" })
//    ResponseEntity<Ingredient> addIngredient(@Parameter(in = ParameterIn.DEFAULT, description = "", schema=@Schema()) @Valid @RequestBody IngredientsAddBody body);
//
//
//    @Operation(summary = "Add pizza to menu", description = "Add pizza to cafes menu", security = {
//            @SecurityRequirement(name = "bearerAuth")    }, tags={ "Cafe" })
//    @ApiResponses(value = {
//            @ApiResponse(responseCode = "200", description = "OK"),
//
//            @ApiResponse(responseCode = "401", description = "Access denied"),
//
//            @ApiResponse(responseCode = "404", description = "Bad request parametr") })
//    @PostMapping(value = "/api/cafe/menu/add/{cafeId}/{pizzaId}")
//    ResponseEntity<Void> addToMenu(@Parameter(in = ParameterIn.PATH, description = "cafe id", required=true, schema=@Schema()) @PathVariable("cafeId") Integer cafeId, @Parameter(in = ParameterIn.PATH, description = "pizza id", required=true, schema=@Schema()) @PathVariable("pizzaId") Integer pizzaId);
//
//
//
//
//    @Operation(summary = "Create new Cafe", description = "create new cafe", security = {
//            @SecurityRequirement(name = "bearerAuth")    }, tags={ "Cafe" })
//    @ApiResponses(value = {
//            @ApiResponse(responseCode = "200", description = "Ok", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Cafe.class))),
//
//            @ApiResponse(responseCode = "401", description = "Access denied"),
//
//            @ApiResponse(responseCode = "404", description = "Request failed - No items") })
//    @GetMapping(value = "/api/cafe/add",
//            produces = { "application/json" },
//            consumes = { "application/json" })
//    ResponseEntity<Cafe> createCafe(@Parameter(in = ParameterIn.DEFAULT, description = "", schema=@Schema()) @Valid @RequestBody CafeAddBody body);
//
//
//    @Operation(summary = "Get all cafes", description = "", security = {
//            @SecurityRequirement(name = "bearerAuth")    }, tags={ "Cafe" })
//    @ApiResponses(value = {
//            @ApiResponse(responseCode = "200", description = "Successful operation", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Cafe.class)))),
//
//            @ApiResponse(responseCode = "401", description = "Access denied") })
//    @GetMapping(value = "/api/cafe/all",
//            produces = { "application/json" })
//    ResponseEntity<List<Cafe>> getAllCafes();
//
//
//
//
//
//
//
//
//
//    @Operation(summary = "Get cafe", description = "Get one by id", security = {
//            @SecurityRequirement(name = "bearerAuth")    }, tags={ "Cafe" })
//    @ApiResponses(value = {
//            @ApiResponse(responseCode = "200", description = "Successful operation", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Cafe.class))),
//
//            @ApiResponse(responseCode = "401", description = "Access denied"),
//
//            @ApiResponse(responseCode = "404", description = "Request failed - No items") })
//    @RequestMapping(value = "/api/cafe/{cafeId}",
//            produces = { "application/json" },
//            method = RequestMethod.GET)
//    ResponseEntity<Cafe> getCafe(@Parameter(in = ParameterIn.PATH, description = "cafe id", required=true, schema=@Schema()) @PathVariable("cafeId") Integer cafeId);
//
//
//
//
//
//    @Operation(summary = "Get list of Pizzas", description = "Show list of cafe pizzas", security = {
//            @SecurityRequirement(name = "bearerAuth")    }, tags={ "Cafe" })
//    @ApiResponses(value = {
//            @ApiResponse(responseCode = "200", description = "Successful operation", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Pizza.class)))),
//
//            @ApiResponse(responseCode = "401", description = "Access denied"),
//
//            @ApiResponse(responseCode = "404", description = "Bad request parametr") })
//    @RequestMapping(value = "/api/cafe/menu/{cafeId}",
//            produces = { "application/json" },
//            method = RequestMethod.GET)
//    ResponseEntity<List<Pizza>> getMenu(@Parameter(in = ParameterIn.PATH, description = "cafe id", required=true, schema=@Schema()) @PathVariable("cafeId") Integer cafeId);
//
//
//
//    @Operation(summary = "Remove pizza from menu", description = "Remove pizza from cafes menu", security = {
//            @SecurityRequirement(name = "bearerAuth")    }, tags={ "Cafe" })
//    @ApiResponses(value = {
//            @ApiResponse(responseCode = "200", description = "OK"),
//
//            @ApiResponse(responseCode = "401", description = "Access denied"),
//
//            @ApiResponse(responseCode = "404", description = "Bad request parametr") })
//    @RequestMapping(value = "/api/cafe/menu/remove/{cafeId}/{pizzaId}",
//            method = RequestMethod.POST)
//    ResponseEntity<Void> removeFromMenu(@Parameter(in = ParameterIn.PATH, description = "cafe id", required=true, schema=@Schema()) @PathVariable("cafeId") Integer cafeId, @Parameter(in = ParameterIn.PATH, description = "pizza id", required=true, schema=@Schema()) @PathVariable("pizzaId") Integer pizzaId);
//
//
//}
//
